import {NgModule, ApplicationRef} from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import {HttpModule, RequestOptions, XHRBackend, Http} from '@angular/http';
import { RouterModule } from '@angular/router';
import { removeNgStyles, createNewHosts, createInputTransfer } from '@angularclass/hmr';

/*
 * Platform and Environment providers/directives/pipes
 */
import { ENV_PROVIDERS } from './environment';
import { routing } from './app.routing';

// App is our top level component
import { App } from './app.component';
import { AppState, InteralStateType } from './app.service';
import { GlobalState } from './global.state';
import { NgaModule } from './theme/nga.module';
import { PagesModule } from './pages/pages.module';
import {AuthGuard} from "./authentication/services/auth-guard.service";
import {LoginModule} from "./login/login.module";
import {MC_ERROR_HANDLER_PROVIDERS, MC_ERROR_HANDLER_OPTIONS} from "./shared/mc-error-handler";
import {ErrorLoggingService, MC_ERROR_LOGGER_PROVIDERS, MC_ERROR_LOGGER_OPTIONS} from "./shared/error-logging.service";
import {AuthService} from "./authentication/services/auth.service";
import {MCNotificationsService} from "./shared/mc-notifications.service";
import {IdentityRegistryApiModule} from "./backend-api/identity-registry/identity-registry-api.module";
import {RolesService} from "./backend-api/identity-registry/services/roles.service";
import {Four04Module} from "./four04/four04.module";
import {FileHelperService} from "./shared/file-helper.service";
import {NavigationHelperService} from "./shared/navigation-helper.service";
import {XmlParserService} from "./shared/xml-parser.service";
import {McHttpService} from "./backend-api/shared/mc-http.service";
import {NotificationsService} from "angular2-notifications";
import {SimpleNotificationsModule} from "angular2-notifications";
import {MrnHelperService} from "./shared/mrn-helper.service";
import {ApplyOrgModule} from "./apply-org/apply-org.module";
import {SiteAdminAuthGuard} from "./authentication/services/site-admin-guard.service";
import {BugReportingService} from "./backend-api/identity-registry/services/bug-reporting.service";
import {BugReportModule} from "./bug-report/bug-report.module";
import {AboutModule} from "./about/about.module";
import {ApiVersionService} from "./backend-api/shared/api-version.service";
// Application wide providers
const APP_PROVIDERS = [
  AppState,
  GlobalState
];

type StoreType = {
  state: InteralStateType,
  restoreInputValues: () => void,
  disposeOldHosts: () => void
};


/**
 * `AppModule` is the main entry point into Angular2's bootstraping process
 */
@NgModule({
  bootstrap: [App],
  declarations: [
    App
  ],
  imports: [ // import Angular's modules
    BrowserModule,
    HttpModule,
    RouterModule,
    FormsModule,
    ReactiveFormsModule,
    NgaModule.forRoot(),
    PagesModule,
    LoginModule,
	  ApplyOrgModule,
	  BugReportModule,
	  AboutModule,
    Four04Module,
    IdentityRegistryApiModule,
    SimpleNotificationsModule,
    routing
  ],
  providers: [ // expose our Services and Providers into Angular's dependency injection
    ENV_PROVIDERS,
    APP_PROVIDERS,
    AuthGuard,
	  SiteAdminAuthGuard,
	  ApiVersionService,
    AuthService,
    RolesService,
	  BugReportingService,
    MCNotificationsService,
    NotificationsService, // See usage: https://github.com/flauc/angular2-notifications/blob/master/docs/toastNotifications.md
	  MC_ERROR_LOGGER_PROVIDERS,
	  {
		  provide: MC_ERROR_LOGGER_OPTIONS,
		  useValue: {
			  makeBugReportFromError: true
		  }
	  },
    FileHelperService,
    XmlParserService,
    NavigationHelperService,
	  MrnHelperService,
    MC_ERROR_HANDLER_PROVIDERS,
    // By default the custom ErrorHandler has rethrowError and unwrapError = false, but we set it here as an example on how to overwrite
    {
      provide: MC_ERROR_HANDLER_OPTIONS,
      useValue: {
        rethrowError: false,
	      unwrapError: false
      }
    },
    { // This provides our McHttpService instead of Http in all autogenerated api-http-calls (and all other http calls too). This will intercept the request and put in http-headers
      provide: Http,
      useFactory: (backend: XHRBackend, defaultOptions: RequestOptions) => {
        return new McHttpService(backend, defaultOptions);
      },
      deps: [ XHRBackend, RequestOptions]
    }
  ]
})

export class AppModule {

  constructor(public appRef: ApplicationRef, public appState: AppState) {
  }

  hmrOnInit(store: StoreType) {
    if (!store || !store.state) return;
    console.log('HMR store', JSON.stringify(store, null, 2));
    // set state
    this.appState._state = store.state;
    // set input values
    if ('restoreInputValues' in store) {
      let restoreInputValues = store.restoreInputValues;
      setTimeout(restoreInputValues);
    }
    this.appRef.tick();
    delete store.state;
    delete store.restoreInputValues;
  }

  hmrOnDestroy(store: StoreType) {
    const cmpLocation = this.appRef.components.map(cmp => cmp.location.nativeElement);
    // save state
    const state = this.appState._state;
    store.state = state;
    // recreate root elements
    store.disposeOldHosts = createNewHosts(cmpLocation);
    // save input values
    store.restoreInputValues = createInputTransfer();
    // remove styles
    removeNgStyles();
  }

  hmrAfterDestroy(store: StoreType) {
    // display new elements
    store.disposeOldHosts();
    delete store.disposeOldHosts;
  }
}
