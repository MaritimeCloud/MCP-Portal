/**
 * Maritime Cloud Identity Registry API
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class CertificatecontrollerApi {
    protected basePath = 'https://test-api.maritimecloud.net/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * getCRL
     * 
     */
    public getCRLUsingGET(extraHttpRequestParams?: any): Observable<any> {
        return this.getCRLUsingGETWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getCRL
     * 
     */
    public getCRLUsingGET1(extraHttpRequestParams?: any): Observable<any> {
        return this.getCRLUsingGET1WithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOCSP
     * 
     * @param encodedOCSP encodedOCSP
     */
    public getOCSPUsingGET(encodedOCSP: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getOCSPUsingGETWithHttpInfo(encodedOCSP, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOCSP
     * 
     * @param encodedOCSP encodedOCSP
     */
    public getOCSPUsingGET1(encodedOCSP: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getOCSPUsingGET1WithHttpInfo(encodedOCSP, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * postOCSP
     * 
     * @param input input
     */
    public postOCSPUsingPOST(input: string, extraHttpRequestParams?: any): Observable<any> {
        return this.postOCSPUsingPOSTWithHttpInfo(input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * postOCSP
     * 
     * @param input input
     */
    public postOCSPUsingPOST1(input: string, extraHttpRequestParams?: any): Observable<any> {
        return this.postOCSPUsingPOST1WithHttpInfo(input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * getCRL
     * 
     */
    public getCRLUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/certificates/crl`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/x-pem-file;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getCRL
     * 
     */
    public getCRLUsingGET1WithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/certificates/crl`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/x-pem-file;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOCSP
     * 
     * @param encodedOCSP encodedOCSP
     */
    public getOCSPUsingGETWithHttpInfo(encodedOCSP: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/certificates/ocsp/${encodedOCSP}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'encodedOCSP' is not null or undefined
        if (encodedOCSP === null || encodedOCSP === undefined) {
            throw new Error('Required parameter encodedOCSP was null or undefined when calling getOCSPUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/ocsp-response'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOCSP
     * 
     * @param encodedOCSP encodedOCSP
     */
    public getOCSPUsingGET1WithHttpInfo(encodedOCSP: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/certificates/ocsp/${encodedOCSP}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'encodedOCSP' is not null or undefined
        if (encodedOCSP === null || encodedOCSP === undefined) {
            throw new Error('Required parameter encodedOCSP was null or undefined when calling getOCSPUsingGET1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/ocsp-response'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * postOCSP
     * 
     * @param input input
     */
    public postOCSPUsingPOSTWithHttpInfo(input: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/certificates/ocsp`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling postOCSPUsingPOST.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/ocsp-request'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/ocsp-response'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * postOCSP
     * 
     * @param input input
     */
    public postOCSPUsingPOST1WithHttpInfo(input: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/certificates/ocsp`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling postOCSPUsingPOST1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/ocsp-request'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/ocsp-response'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
