/**
 * Maritime Cloud Identity Registry API
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class DevicecontrollerApi {
    protected basePath = 'https://api.maritimecloud.net/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * createDevice
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createDeviceUsingPOST (orgMrn: string, input: models.Device, extraHttpRequestParams?: any ) : Observable<models.Device> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/device'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createDeviceUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createDeviceUsingPOST.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * createDevice
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createDeviceUsingPOST1 (orgMrn: string, input: models.Device, extraHttpRequestParams?: any ) : Observable<models.Device> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/device'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createDeviceUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createDeviceUsingPOST1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public deleteDeviceUsingDELETE (orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/device/{deviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteDeviceUsingDELETE.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling deleteDeviceUsingDELETE.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public deleteDeviceUsingDELETE1 (orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/device/{deviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteDeviceUsingDELETE1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling deleteDeviceUsingDELETE1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public getDeviceUsingGET (orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.Device> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/device/{deviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getDeviceUsingGET.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling getDeviceUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public getDeviceUsingGET1 (orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.Device> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/device/{deviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getDeviceUsingGET1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling getDeviceUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationDevices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationDevicesUsingGET (orgMrn: string, extraHttpRequestParams?: any ) : Observable<Array<models.Device>> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/devices'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationDevicesUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationDevices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationDevicesUsingGET1 (orgMrn: string, extraHttpRequestParams?: any ) : Observable<Array<models.Device>> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/devices'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationDevicesUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public newDeviceCertUsingGET (orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.PemCertificate> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/device/{deviceMrn}/certificate/issue-new'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newDeviceCertUsingGET.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling newDeviceCertUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public newDeviceCertUsingGET1 (orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.PemCertificate> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/device/{deviceMrn}/certificate/issue-new'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newDeviceCertUsingGET1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling newDeviceCertUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeDeviceCertUsingPOST (orgMrn: string, deviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/device/{deviceMrn}/certificate/{certId}/revoke'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn))
            .replace('{' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeDeviceCertUsingPOST1 (orgMrn: string, deviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/device/{deviceMrn}/certificate/{certId}/revoke'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn))
            .replace('{' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param input input
     */
    public updateDeviceUsingPUT (orgMrn: string, deviceMrn: string, input: models.Device, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/device/{deviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateDeviceUsingPUT.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling updateDeviceUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateDeviceUsingPUT.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param input input
     */
    public updateDeviceUsingPUT1 (orgMrn: string, deviceMrn: string, input: models.Device, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/device/{deviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateDeviceUsingPUT1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling updateDeviceUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateDeviceUsingPUT1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
