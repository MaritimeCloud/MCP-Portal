/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    Headers,
    Http,
    RequestMethod,
    RequestOptions,
    RequestOptionsArgs,
    Response,
    URLSearchParams
} from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class DevicecontrollerApi {

    protected basePath = 'https://test-api.maritimecloud.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary createDevice
     * @param orgMrn orgMrn
     * @param input input
     */
    public createDeviceUsingPOST(orgMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<models.Device> {
        return this.createDeviceUsingPOSTWithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createDevice
     * @param orgMrn orgMrn
     * @param input input
     */
    public createDeviceUsingPOST1(orgMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<models.Device> {
        return this.createDeviceUsingPOST1WithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteDevice
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public deleteDeviceUsingDELETE(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteDeviceUsingDELETEWithHttpInfo(orgMrn, deviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteDevice
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public deleteDeviceUsingDELETE1(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteDeviceUsingDELETE1WithHttpInfo(orgMrn, deviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getDevice
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public getDeviceUsingGET(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<models.Device> {
        return this.getDeviceUsingGETWithHttpInfo(orgMrn, deviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getDevice
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public getDeviceUsingGET1(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<models.Device> {
        return this.getDeviceUsingGET1WithHttpInfo(orgMrn, deviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getOrganizationDevices
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationDevicesUsingGET(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<models.PageDevice> {
        return this.getOrganizationDevicesUsingGETWithHttpInfo(orgMrn, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getOrganizationDevices
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationDevicesUsingGET1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<models.PageDevice> {
        return this.getOrganizationDevicesUsingGET1WithHttpInfo(orgMrn, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary newDeviceCert
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public newDeviceCertUsingGET(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<models.CertificateBundle> {
        return this.newDeviceCertUsingGETWithHttpInfo(orgMrn, deviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary newDeviceCert
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public newDeviceCertUsingGET1(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<models.CertificateBundle> {
        return this.newDeviceCertUsingGET1WithHttpInfo(orgMrn, deviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary newDeviceCertFromCsr
     * @param csr A PEM encoded PKCS#10 CSR
     * @param deviceMrn deviceMrn
     * @param orgMrn orgMrn
     */
    public newDeviceCertFromCsrUsingPOST(csr: string, deviceMrn: string, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<string> {
        return this.newDeviceCertFromCsrUsingPOSTWithHttpInfo(csr, deviceMrn, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() || "";
                }
            });
    }

    /**
     * 
     * @summary revokeDeviceCert
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeDeviceCertUsingPOST(orgMrn: string, deviceMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeDeviceCertUsingPOSTWithHttpInfo(orgMrn, deviceMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary revokeDeviceCert
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeDeviceCertUsingPOST1(orgMrn: string, deviceMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeDeviceCertUsingPOST1WithHttpInfo(orgMrn, deviceMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary updateDevice
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param input input
     */
    public updateDeviceUsingPUT(orgMrn: string, deviceMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<any> {
        return this.updateDeviceUsingPUTWithHttpInfo(orgMrn, deviceMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary updateDevice
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param input input
     */
    public updateDeviceUsingPUT1(orgMrn: string, deviceMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<any> {
        return this.updateDeviceUsingPUT1WithHttpInfo(orgMrn, deviceMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * createDevice
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createDeviceUsingPOSTWithHttpInfo(orgMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/device'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createDeviceUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createDeviceUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createDevice
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createDeviceUsingPOST1WithHttpInfo(orgMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/device'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createDeviceUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createDeviceUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public deleteDeviceUsingDELETEWithHttpInfo(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/device/${deviceMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteDeviceUsingDELETE.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling deleteDeviceUsingDELETE.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public deleteDeviceUsingDELETE1WithHttpInfo(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/device/${deviceMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteDeviceUsingDELETE1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling deleteDeviceUsingDELETE1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public getDeviceUsingGETWithHttpInfo(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/device/${deviceMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getDeviceUsingGET.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling getDeviceUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public getDeviceUsingGET1WithHttpInfo(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/device/${deviceMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getDeviceUsingGET1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling getDeviceUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationDevices
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationDevicesUsingGETWithHttpInfo(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/devices'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationDevicesUsingGET.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationDevices
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationDevicesUsingGET1WithHttpInfo(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/devices'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationDevicesUsingGET1.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public newDeviceCertUsingGETWithHttpInfo(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/device/${deviceMrn}/certificate/issue-new'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newDeviceCertUsingGET.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling newDeviceCertUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     */
    public newDeviceCertUsingGET1WithHttpInfo(orgMrn: string, deviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/device/${deviceMrn}/certificate/issue-new'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newDeviceCertUsingGET1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling newDeviceCertUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newDeviceCertFromCsr
     *
     * @param csr A PEM encoded PKCS#10 CSR
     * @param deviceMrn deviceMrn
     * @param orgMrn orgMrn

     */
    public newDeviceCertFromCsrUsingPOSTWithHttpInfo(csr: string, deviceMrn: string, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (csr === null || csr === undefined) {
            throw new Error('Required parameter csr was null or undefined when calling newDeviceCertFromCsrUsingPOST.');
        }
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling newDeviceCertFromCsrUsingPOST.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newDeviceCertFromCsrUsingPOST.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8',
            'application/pem-certificate-chain'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/plain'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: csr, // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}/certificate/issue-new/csr`, requestOptions);
    }

    /**
     * revokeDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeDeviceCertUsingPOSTWithHttpInfo(orgMrn: string, deviceMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/device/${deviceMrn}/certificate/${certId}/revoke'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn))
                    .replace('${' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeDeviceCertUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeDeviceCert
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeDeviceCertUsingPOST1WithHttpInfo(orgMrn: string, deviceMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/device/${deviceMrn}/certificate/${certId}/revoke'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn))
                    .replace('${' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeDeviceCertUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param input input
     */
    public updateDeviceUsingPUTWithHttpInfo(orgMrn: string, deviceMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/device/${deviceMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateDeviceUsingPUT.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling updateDeviceUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateDeviceUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateDevice
     * 
     * @param orgMrn orgMrn
     * @param deviceMrn deviceMrn
     * @param input input
     */
    public updateDeviceUsingPUT1WithHttpInfo(orgMrn: string, deviceMrn: string, input: models.Device, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/device/${deviceMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'deviceMrn' + '}', String(deviceMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateDeviceUsingPUT1.');
        }
        // verify required parameter 'deviceMrn' is not null or undefined
        if (deviceMrn === null || deviceMrn === undefined) {
            throw new Error('Required parameter deviceMrn was null or undefined when calling updateDeviceUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateDeviceUsingPUT1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
