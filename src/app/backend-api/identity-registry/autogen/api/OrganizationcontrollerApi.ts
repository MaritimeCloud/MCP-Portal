/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class OrganizationcontrollerApi {
    protected basePath = 'https://api.maritimecloud.net:443/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * applyOrganization
     *
     * @param input input
     */
    public applyOrganizationUsingPOST (input: models.Organization, extraHttpRequestParams?: any ) : Observable<models.Organization> {
        const path = this.basePath + '/oidc/api/org/apply';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling applyOrganizationUsingPOST.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * applyOrganization
     *
     * @param input input
     */
    public applyOrganizationUsingPOST1 (input: models.Organization, extraHttpRequestParams?: any ) : Observable<models.Organization> {
        const path = this.basePath + '/x509/api/org/apply';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling applyOrganizationUsingPOST1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * approveOrganization
     *
     * @param shortName shortName
     */
    public approveOrganizationUsingGET (shortName: string, extraHttpRequestParams?: any ) : Observable<models.Organization> {
        const path = this.basePath + '/oidc/api/org/{shortName}/approve'
            .replace('{' + 'shortName' + '}', String(shortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'shortName' is not null or undefined
        if (shortName === null || shortName === undefined) {
            throw new Error('Required parameter shortName was null or undefined when calling approveOrganizationUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * approveOrganization
     *
     * @param shortName shortName
     */
    public approveOrganizationUsingGET1 (shortName: string, extraHttpRequestParams?: any ) : Observable<models.Organization> {
        const path = this.basePath + '/x509/api/org/{shortName}/approve'
            .replace('{' + 'shortName' + '}', String(shortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'shortName' is not null or undefined
        if (shortName === null || shortName === undefined) {
            throw new Error('Required parameter shortName was null or undefined when calling approveOrganizationUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteOrg
     *
     * @param orgShortName orgShortName
     */
    public deleteOrgUsingDELETE (orgShortName: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgShortName}'
            .replace('{' + 'orgShortName' + '}', String(orgShortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgShortName' is not null or undefined
        if (orgShortName === null || orgShortName === undefined) {
            throw new Error('Required parameter orgShortName was null or undefined when calling deleteOrgUsingDELETE.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteOrg
     *
     * @param orgShortName orgShortName
     */
    public deleteOrgUsingDELETE1 (orgShortName: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgShortName}'
            .replace('{' + 'orgShortName' + '}', String(orgShortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgShortName' is not null or undefined
        if (orgShortName === null || orgShortName === undefined) {
            throw new Error('Required parameter orgShortName was null or undefined when calling deleteOrgUsingDELETE1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganization
     *
     * @param shortName shortName
     */
    public getOrganizationUsingGET (shortName: string, extraHttpRequestParams?: any ) : Observable<models.Organization> {
        const path = this.basePath + '/oidc/api/org/{shortName}'
            .replace('{' + 'shortName' + '}', String(shortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'shortName' is not null or undefined
        if (shortName === null || shortName === undefined) {
            throw new Error('Required parameter shortName was null or undefined when calling getOrganizationUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganization
     *
     * @param shortName shortName
     */
    public getOrganizationUsingGET1 (shortName: string, extraHttpRequestParams?: any ) : Observable<models.Organization> {
        const path = this.basePath + '/x509/api/org/{shortName}'
            .replace('{' + 'shortName' + '}', String(shortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'shortName' is not null or undefined
        if (shortName === null || shortName === undefined) {
            throw new Error('Required parameter shortName was null or undefined when calling getOrganizationUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganization
     *
     */
    public getOrganizationUsingGET2 (extraHttpRequestParams?: any ) : Observable<Array<models.Organization>> {
        const path = this.basePath + '/oidc/api/orgs';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganization
     *
     */
    public getOrganizationUsingGET3 (extraHttpRequestParams?: any ) : Observable<Array<models.Organization>> {
        const path = this.basePath + '/x509/api/orgs';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getUnapprovedOrganizations
     *
     */
    public getUnapprovedOrganizationsUsingGET (extraHttpRequestParams?: any ) : Observable<Array<models.Organization>> {
        const path = this.basePath + '/oidc/api/org/unapprovedorgs';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getUnapprovedOrganizations
     *
     */
    public getUnapprovedOrganizationsUsingGET1 (extraHttpRequestParams?: any ) : Observable<Array<models.Organization>> {
        const path = this.basePath + '/x509/api/org/unapprovedorgs';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newOrgCert
     *
     * @param orgShortName orgShortName
     */
    public newOrgCertUsingGET (orgShortName: string, extraHttpRequestParams?: any ) : Observable<models.PemCertificate> {
        const path = this.basePath + '/oidc/api/org/{orgShortName}/generatecertificate'
            .replace('{' + 'orgShortName' + '}', String(orgShortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgShortName' is not null or undefined
        if (orgShortName === null || orgShortName === undefined) {
            throw new Error('Required parameter orgShortName was null or undefined when calling newOrgCertUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newOrgCert
     *
     * @param orgShortName orgShortName
     */
    public newOrgCertUsingGET1 (orgShortName: string, extraHttpRequestParams?: any ) : Observable<models.PemCertificate> {
        const path = this.basePath + '/x509/api/org/{orgShortName}/generatecertificate'
            .replace('{' + 'orgShortName' + '}', String(orgShortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgShortName' is not null or undefined
        if (orgShortName === null || orgShortName === undefined) {
            throw new Error('Required parameter orgShortName was null or undefined when calling newOrgCertUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeOrgCert
     *
     * @param orgShortName orgShortName
     * @param certId certId
     * @param input input
     */
    public revokeOrgCertUsingPOST (orgShortName: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgShortName}/certificates/{certId}/revoke'
            .replace('{' + 'orgShortName' + '}', String(orgShortName))
            .replace('{' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgShortName' is not null or undefined
        if (orgShortName === null || orgShortName === undefined) {
            throw new Error('Required parameter orgShortName was null or undefined when calling revokeOrgCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeOrgCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeOrgCertUsingPOST.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeOrgCert
     *
     * @param orgShortName orgShortName
     * @param certId certId
     * @param input input
     */
    public revokeOrgCertUsingPOST1 (orgShortName: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgShortName}/certificates/{certId}/revoke'
            .replace('{' + 'orgShortName' + '}', String(orgShortName))
            .replace('{' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgShortName' is not null or undefined
        if (orgShortName === null || orgShortName === undefined) {
            throw new Error('Required parameter orgShortName was null or undefined when calling revokeOrgCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeOrgCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeOrgCertUsingPOST1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateOrganization
     *
     * @param shortName shortName
     * @param input input
     */
    public updateOrganizationUsingPUT (shortName: string, input: models.Organization, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{shortName}'
            .replace('{' + 'shortName' + '}', String(shortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'shortName' is not null or undefined
        if (shortName === null || shortName === undefined) {
            throw new Error('Required parameter shortName was null or undefined when calling updateOrganizationUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateOrganizationUsingPUT.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateOrganization
     *
     * @param shortName shortName
     * @param input input
     */
    public updateOrganizationUsingPUT1 (shortName: string, input: models.Organization, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{shortName}'
            .replace('{' + 'shortName' + '}', String(shortName));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'shortName' is not null or undefined
        if (shortName === null || shortName === undefined) {
            throw new Error('Required parameter shortName was null or undefined when calling updateOrganizationUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateOrganizationUsingPUT1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
