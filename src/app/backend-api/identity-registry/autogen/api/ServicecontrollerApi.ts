/**
 * Maritime Cloud Identity Registry API
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: be carefull when autogenerating. This file is changed manually
import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class ServicecontrollerApi {
    protected basePath = 'https://api.maritimecloud.net/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * createService
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createServiceUsingPOST (orgMrn: string, input: models.Service, extraHttpRequestParams?: any ) : Observable<models.Service> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createServiceUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createServiceUsingPOST.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * createService
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createServiceUsingPOST1 (orgMrn: string, input: models.Service, extraHttpRequestParams?: any ) : Observable<models.Service> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createServiceUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createServiceUsingPOST1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public deleteServiceUsingDELETE (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteServiceUsingDELETE.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling deleteServiceUsingDELETE.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public deleteServiceUsingDELETE1 (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteServiceUsingDELETE1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling deleteServiceUsingDELETE1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationServices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationServicesUsingGET (orgMrn: string, extraHttpRequestParams?: any ) : Observable<Array<models.Service>> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/services'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationServicesUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationServices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationServicesUsingGET1 (orgMrn: string, extraHttpRequestParams?: any ) : Observable<Array<models.Service>> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/services'
            .replace('{' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationServicesUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getServiceJbossXml
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceJbossXmlUsingGET (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<string> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}/jbossxml'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceJbossXmlUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceJbossXmlUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
// NOTE: be carefull when autogenerating. This file is changed manually
	                return response.text();
                }
            });
    }

    /**
     * getServiceJbossXml
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceJbossXmlUsingGET1 (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<string> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}/jbossxml'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceJbossXmlUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceJbossXmlUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getServiceKeycloakJson
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceKeycloakJsonUsingGET (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<string> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}/keycloakjson'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceKeycloakJsonUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJsonUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
// NOTE: be carefull when autogenerating. This file is changed manually
                    return response.text();
                }
            });
    }

    /**
     * getServiceKeycloakJson
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceKeycloakJsonUsingGET1 (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<string> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}/keycloakjson'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceKeycloakJsonUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJsonUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceUsingGET (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.Service> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceUsingGET1 (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.Service> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public newServiceCertUsingGET (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.PemCertificate> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}/certificate/issue-new'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newServiceCertUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling newServiceCertUsingGET.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public newServiceCertUsingGET1 (orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any ) : Observable<models.PemCertificate> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}/certificate/issue-new'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newServiceCertUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling newServiceCertUsingGET1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeServiceCertUsingPOST (orgMrn: string, serviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}/certificate/{certId}/revoke'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn))
            .replace('{' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeServiceCertUsingPOST1 (orgMrn: string, serviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}/certificate/{certId}/revoke'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn))
            .replace('{' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param input input
     */
    public updateServiceUsingPUT (orgMrn: string, serviceMrn: string, input: models.Service, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/oidc/api/org/{orgMrn}/service/{serviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateServiceUsingPUT.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling updateServiceUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateServiceUsingPUT.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param input input
     */
    public updateServiceUsingPUT1 (orgMrn: string, serviceMrn: string, input: models.Service, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/x509/api/org/{orgMrn}/service/{serviceMrn}'
            .replace('{' + 'orgMrn' + '}', String(orgMrn))
            .replace('{' + 'serviceMrn' + '}', String(serviceMrn));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateServiceUsingPUT1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling updateServiceUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateServiceUsingPUT1.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(input);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
