/**
 * Maritime Cloud Identity Registry API
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ServicecontrollerApi {
    protected basePath = 'https://test-api.maritimecloud.net/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * createService
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createServiceUsingPOST(orgMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<models.Service> {
        return this.createServiceUsingPOSTWithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * createService
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createServiceUsingPOST1(orgMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<models.Service> {
        return this.createServiceUsingPOST1WithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public deleteServiceUsingDELETE(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteServiceUsingDELETEWithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public deleteServiceUsingDELETE1(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteServiceUsingDELETE1WithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationServices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationServicesUsingGET(orgMrn: string, extraHttpRequestParams?: any): Observable<Array<models.Service>> {
        return this.getOrganizationServicesUsingGETWithHttpInfo(orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationServices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationServicesUsingGET1(orgMrn: string, extraHttpRequestParams?: any): Observable<Array<models.Service>> {
        return this.getOrganizationServicesUsingGET1WithHttpInfo(orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getServiceJbossXml
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceJbossXmlUsingGET(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<string> {
        return this.getServiceJbossXmlUsingGETWithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getServiceJbossXml
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceJbossXmlUsingGET1(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<string> {
        return this.getServiceJbossXmlUsingGET1WithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getServiceKeycloakJson
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceKeycloakJsonUsingGET(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<string> {
        return this.getServiceKeycloakJsonUsingGETWithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getServiceKeycloakJson
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceKeycloakJsonUsingGET1(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<string> {
        return this.getServiceKeycloakJsonUsingGET1WithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceUsingGET(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<models.Service> {
        return this.getServiceUsingGETWithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceUsingGET1(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<models.Service> {
        return this.getServiceUsingGET1WithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public newServiceCertUsingGET(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<models.PemCertificate> {
        return this.newServiceCertUsingGETWithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public newServiceCertUsingGET1(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<models.PemCertificate> {
        return this.newServiceCertUsingGET1WithHttpInfo(orgMrn, serviceMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeServiceCertUsingPOST(orgMrn: string, serviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeServiceCertUsingPOSTWithHttpInfo(orgMrn, serviceMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeServiceCertUsingPOST1(orgMrn: string, serviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeServiceCertUsingPOST1WithHttpInfo(orgMrn, serviceMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param input input
     */
    public updateServiceUsingPUT(orgMrn: string, serviceMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<any> {
        return this.updateServiceUsingPUTWithHttpInfo(orgMrn, serviceMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param input input
     */
    public updateServiceUsingPUT1(orgMrn: string, serviceMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<any> {
        return this.updateServiceUsingPUT1WithHttpInfo(orgMrn, serviceMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * createService
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createServiceUsingPOSTWithHttpInfo(orgMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createServiceUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createServiceUsingPOST.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createService
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createServiceUsingPOST1WithHttpInfo(orgMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createServiceUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createServiceUsingPOST1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public deleteServiceUsingDELETEWithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteServiceUsingDELETE.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling deleteServiceUsingDELETE.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public deleteServiceUsingDELETE1WithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteServiceUsingDELETE1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling deleteServiceUsingDELETE1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationServices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationServicesUsingGETWithHttpInfo(orgMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/services`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationServicesUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationServices
     * 
     * @param orgMrn orgMrn
     */
    public getOrganizationServicesUsingGET1WithHttpInfo(orgMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/services`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationServicesUsingGET1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getServiceJbossXml
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceJbossXmlUsingGETWithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}/jbossxml`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceJbossXmlUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceJbossXmlUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getServiceJbossXml
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceJbossXmlUsingGET1WithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}/jbossxml`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceJbossXmlUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceJbossXmlUsingGET1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getServiceKeycloakJson
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceKeycloakJsonUsingGETWithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}/keycloakjson`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceKeycloakJsonUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJsonUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getServiceKeycloakJson
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceKeycloakJsonUsingGET1WithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}/keycloakjson`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceKeycloakJsonUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJsonUsingGET1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceUsingGETWithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public getServiceUsingGET1WithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceUsingGET1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public newServiceCertUsingGETWithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}/certificate/issue-new`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newServiceCertUsingGET.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling newServiceCertUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     */
    public newServiceCertUsingGET1WithHttpInfo(orgMrn: string, serviceMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}/certificate/issue-new`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newServiceCertUsingGET1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling newServiceCertUsingGET1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeServiceCertUsingPOSTWithHttpInfo(orgMrn: string, serviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}/certificate/${certId}/revoke`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeServiceCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeServiceCertUsingPOST.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeServiceCert
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param certId certId
     * @param input input
     */
    public revokeServiceCertUsingPOST1WithHttpInfo(orgMrn: string, serviceMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}/certificate/${certId}/revoke`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeServiceCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeServiceCertUsingPOST1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param input input
     */
    public updateServiceUsingPUTWithHttpInfo(orgMrn: string, serviceMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/service/${serviceMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateServiceUsingPUT.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling updateServiceUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateServiceUsingPUT.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateService
     * 
     * @param orgMrn orgMrn
     * @param serviceMrn serviceMrn
     * @param input input
     */
    public updateServiceUsingPUT1WithHttpInfo(orgMrn: string, serviceMrn: string, input: models.Service, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/service/${serviceMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateServiceUsingPUT1.');
        }
        // verify required parameter 'serviceMrn' is not null or undefined
        if (serviceMrn === null || serviceMrn === undefined) {
            throw new Error('Required parameter serviceMrn was null or undefined when calling updateServiceUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateServiceUsingPUT1.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
