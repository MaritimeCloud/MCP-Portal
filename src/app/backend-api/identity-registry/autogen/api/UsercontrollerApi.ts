/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsercontrollerApi {

    protected basePath = 'https://test-api.maritimecloud.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary createUser
     * @param orgMrn orgMrn
     * @param input input
     */
    public createUserUsingPOST(orgMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<models.User> {
        return this.createUserUsingPOSTWithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createUser
     * @param orgMrn orgMrn
     * @param input input
     */
    public createUserUsingPOST1(orgMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<models.User> {
        return this.createUserUsingPOST1WithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteUser
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public deleteUserUsingDELETE(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteUserUsingDELETEWithHttpInfo(orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteUser
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public deleteUserUsingDELETE1(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteUserUsingDELETE1WithHttpInfo(orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getOrganizationUsers
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationUsersUsingGET(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<models.PageUser> {
        return this.getOrganizationUsersUsingGETWithHttpInfo(orgMrn, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getOrganizationUsers
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationUsersUsingGET1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<models.PageUser> {
        return this.getOrganizationUsersUsingGET1WithHttpInfo(orgMrn, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getUser
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public getUserUsingGET(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<models.User> {
        return this.getUserUsingGETWithHttpInfo(orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getUser
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public getUserUsingGET1(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<models.User> {
        return this.getUserUsingGET1WithHttpInfo(orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary newUserCertFromCsr
     * @param csr A PEM encoded PKCS#10 CSR
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertFromCsrUsingPOST(csr: string, orgMrn: string, userMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<string> {
        return this.newUserCertFromCsrUsingPOSTWithHttpInfo(csr, orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() || "";
                }
            });
    }

    /**
     *
     * @summary newUserCertFromCsr
     * @param csr A PEM encoded PKCS#10 CSR
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertFromCsrUsingPOST1(csr: string, orgMrn: string, userMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<string> {
        return this.newUserCertFromCsrUsingPOST1WithHttpInfo(csr, orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary newUserCert
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertUsingGET(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<models.CertificateBundle> {
        return this.newUserCertUsingGETWithHttpInfo(orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary newUserCert
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertUsingGET1(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<models.CertificateBundle> {
        return this.newUserCertUsingGET1WithHttpInfo(orgMrn, userMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary revokeUserCert
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param certId certId
     * @param input input
     */
    public revokeUserCertUsingPOST(orgMrn: string, userMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeUserCertUsingPOSTWithHttpInfo(orgMrn, userMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary revokeUserCert
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param certId certId
     * @param input input
     */
    public revokeUserCertUsingPOST1(orgMrn: string, userMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeUserCertUsingPOST1WithHttpInfo(orgMrn, userMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary updateUser
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param input input
     */
    public updateUserUsingPUT(orgMrn: string, userMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<any> {
        return this.updateUserUsingPUTWithHttpInfo(orgMrn, userMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary updateUser
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param input input
     */
    public updateUserUsingPUT1(orgMrn: string, userMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<any> {
        return this.updateUserUsingPUT1WithHttpInfo(orgMrn, userMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * createUser
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createUserUsingPOSTWithHttpInfo(orgMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/user'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createUserUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createUserUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createUser
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createUserUsingPOST1WithHttpInfo(orgMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/user'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createUserUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createUserUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteUser
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public deleteUserUsingDELETEWithHttpInfo(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/user/${userMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteUserUsingDELETE.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling deleteUserUsingDELETE.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteUser
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public deleteUserUsingDELETE1WithHttpInfo(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/user/${userMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteUserUsingDELETE1.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling deleteUserUsingDELETE1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationUsers
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationUsersUsingGETWithHttpInfo(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/users'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationUsersUsingGET.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationUsers
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationUsersUsingGET1WithHttpInfo(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/users'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationUsersUsingGET1.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getUser
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public getUserUsingGETWithHttpInfo(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/user/${userMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getUserUsingGET.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling getUserUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getUser
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public getUserUsingGET1WithHttpInfo(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/user/${userMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getUserUsingGET1.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling getUserUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newUserCertFromCsr
     *
     * @param csr A PEM encoded PKCS#10 CSR
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertFromCsrUsingPOSTWithHttpInfo(csr: string, orgMrn: string, userMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (csr === null || csr === undefined) {
            throw new Error('Required parameter csr was null or undefined when calling newUserCertFromCsrUsingPOST.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newUserCertFromCsrUsingPOST.');
        }
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling newUserCertFromCsrUsingPOST.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8',
            'application/pem-certificate-chain'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        headers.set('Content-Type', 'text/plain');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: csr, // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}/certificate/issue-new/csr`, requestOptions);
    }

    /**
     * newUserCertFromCsr
     *
     * @param csr A PEM encoded PKCS#10 CSR
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertFromCsrUsingPOST1WithHttpInfo(csr: string, orgMrn: string, userMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (csr === null || csr === undefined) {
            throw new Error('Required parameter csr was null or undefined when calling newUserCertFromCsrUsingPOST1.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newUserCertFromCsrUsingPOST1.');
        }
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling newUserCertFromCsrUsingPOST1.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8',
            'application/pem-certificate-chain'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/plain'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: csr == null ? '' : JSON.stringify(csr), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}/certificate/issue-new/csr`, requestOptions);
    }

    /**
     * newUserCert
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertUsingGETWithHttpInfo(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/user/${userMrn}/certificate/issue-new'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newUserCertUsingGET.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling newUserCertUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newUserCert
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     */
    public newUserCertUsingGET1WithHttpInfo(orgMrn: string, userMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/user/${userMrn}/certificate/issue-new'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newUserCertUsingGET1.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling newUserCertUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeUserCert
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param certId certId
     * @param input input
     */
    public revokeUserCertUsingPOSTWithHttpInfo(orgMrn: string, userMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/user/${userMrn}/certificate/${certId}/revoke'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn))
                    .replace('${' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeUserCertUsingPOST.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling revokeUserCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeUserCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeUserCertUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeUserCert
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param certId certId
     * @param input input
     */
    public revokeUserCertUsingPOST1WithHttpInfo(orgMrn: string, userMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/user/${userMrn}/certificate/${certId}/revoke'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn))
                    .replace('${' + 'certId' + '}', String(certId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeUserCertUsingPOST1.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling revokeUserCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeUserCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeUserCertUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateUser
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param input input
     */
    public updateUserUsingPUTWithHttpInfo(orgMrn: string, userMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/user/${userMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateUserUsingPUT.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling updateUserUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateUserUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateUser
     * 
     * @param orgMrn orgMrn
     * @param userMrn userMrn
     * @param input input
     */
    public updateUserUsingPUT1WithHttpInfo(orgMrn: string, userMrn: string, input: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/user/${userMrn}'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'userMrn' + '}', String(userMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateUserUsingPUT1.');
        }
        // verify required parameter 'userMrn' is not null or undefined
        if (userMrn === null || userMrn === undefined) {
            throw new Error('Required parameter userMrn was null or undefined when calling updateUserUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateUserUsingPUT1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
