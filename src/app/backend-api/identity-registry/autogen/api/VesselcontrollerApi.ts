/**
 * Maritime Cloud Identity Registry API
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.4.90
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class VesselcontrollerApi {
    protected basePath = 'https://localhost:8443/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * createVessel
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createVesselUsingPOST(orgMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<models.Vessel> {
        return this.createVesselUsingPOSTWithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * createVessel
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createVesselUsingPOST1(orgMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<models.Vessel> {
        return this.createVesselUsingPOST1WithHttpInfo(orgMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselUsingDELETE(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteVesselUsingDELETEWithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselUsingDELETE1(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteVesselUsingDELETE1WithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationVessels
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationVesselsUsingGET(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<models.PageVessel> {
        return this.getOrganizationVesselsUsingGETWithHttpInfo(orgMrn, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getOrganizationVessels
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationVesselsUsingGET1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<models.PageVessel> {
        return this.getOrganizationVesselsUsingGET1WithHttpInfo(orgMrn, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselUsingGET(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<models.Vessel> {
        return this.getVesselUsingGETWithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselUsingGET1(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<models.Vessel> {
        return this.getVesselUsingGET1WithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public newVesselCertUsingGET(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<models.PemCertificate> {
        return this.newVesselCertUsingGETWithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * newVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public newVesselCertUsingGET1(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<models.PemCertificate> {
        return this.newVesselCertUsingGET1WithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param certId certId
     * @param input input
     */
    public revokeVesselCertUsingPOST(orgMrn: string, vesselMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeVesselCertUsingPOSTWithHttpInfo(orgMrn, vesselMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * revokeVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param certId certId
     * @param input input
     */
    public revokeVesselCertUsingPOST1(orgMrn: string, vesselMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<any> {
        return this.revokeVesselCertUsingPOST1WithHttpInfo(orgMrn, vesselMrn, certId, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param input input
     */
    public updateVesselUsingPUT(orgMrn: string, vesselMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<any> {
        return this.updateVesselUsingPUTWithHttpInfo(orgMrn, vesselMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param input input
     */
    public updateVesselUsingPUT1(orgMrn: string, vesselMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<any> {
        return this.updateVesselUsingPUT1WithHttpInfo(orgMrn, vesselMrn, input, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * createVessel
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createVesselUsingPOSTWithHttpInfo(orgMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessel`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createVesselUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createVessel
     * 
     * @param orgMrn orgMrn
     * @param input input
     */
    public createVesselUsingPOST1WithHttpInfo(orgMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessel`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createVesselUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselUsingDELETEWithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessel/${vesselMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteVesselUsingDELETE.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling deleteVesselUsingDELETE.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselUsingDELETE1WithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessel/${vesselMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteVesselUsingDELETE1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling deleteVesselUsingDELETE1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationVessels
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationVesselsUsingGETWithHttpInfo(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessels`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationVesselsUsingGET.');
        }
        if (page !== undefined) {
                queryParameters.set('page', <any>page);

        }

        if (size !== undefined) {
                queryParameters.set('size', <any>size);

        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getOrganizationVessels
     * 
     * @param orgMrn orgMrn
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getOrganizationVesselsUsingGET1WithHttpInfo(orgMrn: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessels`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationVesselsUsingGET1.');
        }
        if (page !== undefined) {
                queryParameters.set('page', <any>page);

        }

        if (size !== undefined) {
                queryParameters.set('size', <any>size);

        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselUsingGETWithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessel/${vesselMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselUsingGET.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselUsingGET1WithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessel/${vesselMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselUsingGET1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public newVesselCertUsingGETWithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessel/${vesselMrn}/certificate/issue-new`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newVesselCertUsingGET.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling newVesselCertUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * newVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public newVesselCertUsingGET1WithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessel/${vesselMrn}/certificate/issue-new`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling newVesselCertUsingGET1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling newVesselCertUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param certId certId
     * @param input input
     */
    public revokeVesselCertUsingPOSTWithHttpInfo(orgMrn: string, vesselMrn: string, certId: string, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessel/${vesselMrn}/certificate/${certId}/revoke`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeVesselCertUsingPOST.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling revokeVesselCertUsingPOST.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeVesselCertUsingPOST.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeVesselCertUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * revokeVesselCert
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param certId certId
     * @param input input
     */
    public revokeVesselCertUsingPOST1WithHttpInfo(orgMrn: string, vesselMrn: string, certId: number, input: models.CertificateRevocation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessel/${vesselMrn}/certificate/${certId}/revoke`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling revokeVesselCertUsingPOST1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling revokeVesselCertUsingPOST1.');
        }
        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new Error('Required parameter certId was null or undefined when calling revokeVesselCertUsingPOST1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling revokeVesselCertUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param input input
     */
    public updateVesselUsingPUTWithHttpInfo(orgMrn: string, vesselMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/oidc/api/org/${orgMrn}/vessel/${vesselMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateVesselUsingPUT.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling updateVesselUsingPUT.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateVesselUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateVessel
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param input input
     */
    public updateVesselUsingPUT1WithHttpInfo(orgMrn: string, vesselMrn: string, input: models.Vessel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/x509/api/org/${orgMrn}/vessel/${vesselMrn}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateVesselUsingPUT1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling updateVesselUsingPUT1.');
        }
        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateVesselUsingPUT1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
