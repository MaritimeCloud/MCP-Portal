/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.8.0
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';
import { CustomQueryEncoderHelper }                          from '../encoder';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Agent } from '../model/agent';
import { PageOfAgent } from '../model/pageOfAgent';
import { ResponseEntity } from '../model/responseEntity';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AgentControllerService {

    protected basePath = 'https://test-api.maritimecloud.net';
    public defaultHeaders = new Headers();
    public configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * 
     * @summary createAgent
     * @param input input
     * @param orgMrn orgMrn
     */
    public createAgentUsingPOST(input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Agent> {
        return this.createAgentUsingPOSTWithHttpInfo(input, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createAgent
     * @param input input
     * @param orgMrn orgMrn
     */
    public createAgentUsingPOST1(input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Agent> {
        return this.createAgentUsingPOST1WithHttpInfo(input, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteAgent
     * @param agentId agentId
     * @param orgMrn orgMrn
     */
    public deleteAgentUsingDELETE(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<ResponseEntity> {
        return this.deleteAgentUsingDELETEWithHttpInfo(agentId, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteAgent
     * @param agentId agentId
     * @param orgMrn orgMrn
     */
    public deleteAgentUsingDELETE1(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<ResponseEntity> {
        return this.deleteAgentUsingDELETE1WithHttpInfo(agentId, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getActingOnBehalfOf
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     */
    public getActingOnBehalfOfUsingGET(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<PageOfAgent> {
        return this.getActingOnBehalfOfUsingGETWithHttpInfo(orgMrn, offset, page, pageNumber, pageSize, paged, size, sort, sortSorted, sortUnsorted, unpaged, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getActingOnBehalfOf
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     */
    public getActingOnBehalfOfUsingGET1(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<PageOfAgent> {
        return this.getActingOnBehalfOfUsingGET1WithHttpInfo(orgMrn, offset, page, pageNumber, pageSize, paged, size, sort, sortSorted, sortUnsorted, unpaged, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getAgent
     * @param agentId agentId
     * @param orgMrn orgMrn
     */
    public getAgentUsingGET(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Agent> {
        return this.getAgentUsingGETWithHttpInfo(agentId, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getAgent
     * @param agentId agentId
     * @param orgMrn orgMrn
     */
    public getAgentUsingGET1(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Agent> {
        return this.getAgentUsingGET1WithHttpInfo(agentId, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getAgents
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     */
    public getAgentsUsingGET(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<PageOfAgent> {
        return this.getAgentsUsingGETWithHttpInfo(orgMrn, offset, page, pageNumber, pageSize, paged, size, sort, sortSorted, sortUnsorted, unpaged, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getAgents
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     */
    public getAgentsUsingGET1(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<PageOfAgent> {
        return this.getAgentsUsingGET1WithHttpInfo(orgMrn, offset, page, pageNumber, pageSize, paged, size, sort, sortSorted, sortUnsorted, unpaged, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary updateAgent
     * @param agentId agentId
     * @param input input
     * @param orgMrn orgMrn
     */
    public updateAgentUsingPUT(agentId: number, input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Agent> {
        return this.updateAgentUsingPUTWithHttpInfo(agentId, input, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary updateAgent
     * @param agentId agentId
     * @param input input
     * @param orgMrn orgMrn
     */
    public updateAgentUsingPUT1(agentId: number, input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Agent> {
        return this.updateAgentUsingPUT1WithHttpInfo(agentId, input, orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * createAgent
     * 
     * @param input input
     * @param orgMrn orgMrn
     
     */
    public createAgentUsingPOSTWithHttpInfo(input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createAgentUsingPOST.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createAgentUsingPOST.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent`, requestOptions);
    }

    /**
     * createAgent
     * 
     * @param input input
     * @param orgMrn orgMrn
     
     */
    public createAgentUsingPOST1WithHttpInfo(input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createAgentUsingPOST1.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createAgentUsingPOST1.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/agent`, requestOptions);
    }

    /**
     * deleteAgent
     * 
     * @param agentId agentId
     * @param orgMrn orgMrn
     
     */
    public deleteAgentUsingDELETEWithHttpInfo(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (agentId === null || agentId === undefined) {
            throw new Error('Required parameter agentId was null or undefined when calling deleteAgentUsingDELETE.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteAgentUsingDELETE.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`, requestOptions);
    }

    /**
     * deleteAgent
     * 
     * @param agentId agentId
     * @param orgMrn orgMrn
     
     */
    public deleteAgentUsingDELETE1WithHttpInfo(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (agentId === null || agentId === undefined) {
            throw new Error('Required parameter agentId was null or undefined when calling deleteAgentUsingDELETE1.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteAgentUsingDELETE1.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`, requestOptions);
    }

    /**
     * getActingOnBehalfOf
     * 
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     
     */
    public getActingOnBehalfOfUsingGETWithHttpInfo(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getActingOnBehalfOfUsingGET.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined) {
            queryParameters.set('paged', <any>paged);
        }
        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined) {
            queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined) {
            queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined) {
            queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/acting-on-behalf-of`, requestOptions);
    }

    /**
     * getActingOnBehalfOf
     * 
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     
     */
    public getActingOnBehalfOfUsingGET1WithHttpInfo(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getActingOnBehalfOfUsingGET1.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined) {
            queryParameters.set('paged', <any>paged);
        }
        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined) {
            queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined) {
            queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined) {
            queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/acting-on-behalf-of`, requestOptions);
    }

    /**
     * getAgent
     * 
     * @param agentId agentId
     * @param orgMrn orgMrn
     
     */
    public getAgentUsingGETWithHttpInfo(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (agentId === null || agentId === undefined) {
            throw new Error('Required parameter agentId was null or undefined when calling getAgentUsingGET.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getAgentUsingGET.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`, requestOptions);
    }

    /**
     * getAgent
     * 
     * @param agentId agentId
     * @param orgMrn orgMrn
     
     */
    public getAgentUsingGET1WithHttpInfo(agentId: number, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (agentId === null || agentId === undefined) {
            throw new Error('Required parameter agentId was null or undefined when calling getAgentUsingGET1.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getAgentUsingGET1.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`, requestOptions);
    }

    /**
     * getAgents
     * 
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     
     */
    public getAgentsUsingGETWithHttpInfo(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getAgentsUsingGET.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined) {
            queryParameters.set('paged', <any>paged);
        }
        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined) {
            queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined) {
            queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined) {
            queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agents`, requestOptions);
    }

    /**
     * getAgents
     * 
     * @param orgMrn orgMrn
     * @param offset 
     * @param page Results page you want to retrieve (0..N)
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Number of records per page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     
     */
    public getAgentsUsingGET1WithHttpInfo(orgMrn: string, offset?: number, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getAgentsUsingGET1.');
        }

        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined) {
            queryParameters.set('paged', <any>paged);
        }
        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined) {
            queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined) {
            queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined) {
            queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/agents`, requestOptions);
    }

    /**
     * updateAgent
     * 
     * @param agentId agentId
     * @param input input
     * @param orgMrn orgMrn
     
     */
    public updateAgentUsingPUTWithHttpInfo(agentId: number, input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (agentId === null || agentId === undefined) {
            throw new Error('Required parameter agentId was null or undefined when calling updateAgentUsingPUT.');
        }
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateAgentUsingPUT.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateAgentUsingPUT.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`, requestOptions);
    }

    /**
     * updateAgent
     * 
     * @param agentId agentId
     * @param input input
     * @param orgMrn orgMrn
     
     */
    public updateAgentUsingPUT1WithHttpInfo(agentId: number, input: Agent, orgMrn: string, extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
        if (agentId === null || agentId === undefined) {
            throw new Error('Required parameter agentId was null or undefined when calling updateAgentUsingPUT1.');
        }
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling updateAgentUsingPUT1.');
        }
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling updateAgentUsingPUT1.');
        }

        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: input == null ? '' : JSON.stringify(input), // https://github.com/angular/angular/issues/10612
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}/x509/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`, requestOptions);
    }

}
