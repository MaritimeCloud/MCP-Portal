/**
 * Maritime Cloud Service Registry API
 * Maritime Cloud Service Registry, developed under the Horizon 2020 Project EfficienSea2, cofunded by the European Union.
 *
 * OpenAPI spec version: 1.0
 * Contact: josef.jahn@frequentis.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ServicespecificationresourceApi {
    protected basePath = 'https://sr-staging.maritimecloud.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * createSpecification
     * 
     * @param specification specification
     * @param authorization Authorization
     */
    public createSpecificationUsingPOST(specification: models.Specification, authorization: string, extraHttpRequestParams?: any): Observable<models.Specification> {
        return this.createSpecificationUsingPOSTWithHttpInfo(specification, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * deleteSpecification
     * 
     * @param id id
     * @param version version
     * @param authorization Authorization
     */
    public deleteSpecificationUsingDELETE(id: string, version: string, authorization: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteSpecificationUsingDELETEWithHttpInfo(id, version, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getAllSpecificationsById
     * 
     * @param id id
     * @param page Page number of the requested page
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getAllSpecificationsByIdUsingGET(id: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Array<models.Specification>> {
        return this.getAllSpecificationsByIdUsingGETWithHttpInfo(id, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getAllSpecifications
     * 
     * @param page Page number of the requested page
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getAllSpecificationsUsingGET(page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Array<models.Specification>> {
        return this.getAllSpecificationsUsingGETWithHttpInfo(page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * getSpecification
     * Returns the service specification with the specified id and version. Use version &#39;latest&#39; to get the newest one.
     * @param id id
     * @param version version
     */
    public getSpecificationUsingGET(id: string, version: string, extraHttpRequestParams?: any): Observable<models.Specification> {
        return this.getSpecificationUsingGETWithHttpInfo(id, version, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * searchSpecifications
     * 
     * @param query query
     * @param page Page number of the requested page
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public searchSpecificationsUsingGET(query: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Array<models.Specification>> {
        return this.searchSpecificationsUsingGETWithHttpInfo(query, page, size, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateSpecificationStatus
     * 
     * @param id id
     * @param version version
     * @param status status
     * @param authorization Authorization
     */
    public updateSpecificationStatusUsingPUT(id: string, version: string, status: string, authorization: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.updateSpecificationStatusUsingPUTWithHttpInfo(id, version, status, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * updateSpecification
     * 
     * @param specification specification
     * @param authorization Authorization
     */
    public updateSpecificationUsingPUT(specification: models.Specification, authorization: string, extraHttpRequestParams?: any): Observable<models.Specification> {
        return this.updateSpecificationUsingPUTWithHttpInfo(specification, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * createSpecification
     * 
     * @param specification specification
     * @param authorization Authorization
     */
    public createSpecificationUsingPOSTWithHttpInfo(specification: models.Specification, authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'specification' is not null or undefined
        if (specification === null || specification === undefined) {
            throw new Error('Required parameter specification was null or undefined when calling createSpecificationUsingPOST.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createSpecificationUsingPOST.');
        }
        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: specification == null ? '' : JSON.stringify(specification), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteSpecification
     * 
     * @param id id
     * @param version version
     * @param authorization Authorization
     */
    public deleteSpecificationUsingDELETEWithHttpInfo(id: string, version: string, authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification/${id}/${version}/'
                    .replace('${' + 'id' + '}', String(id))
                    .replace('${' + 'version' + '}', String(version));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSpecificationUsingDELETE.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteSpecificationUsingDELETE.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteSpecificationUsingDELETE.');
        }
        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getAllSpecificationsById
     * 
     * @param id id
     * @param page Page number of the requested page
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getAllSpecificationsByIdUsingGETWithHttpInfo(id: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAllSpecificationsByIdUsingGET.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getAllSpecifications
     * 
     * @param page Page number of the requested page
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public getAllSpecificationsUsingGETWithHttpInfo(page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getSpecification
     * Returns the service specification with the specified id and version. Use version &#39;latest&#39; to get the newest one.
     * @param id id
     * @param version version
     */
    public getSpecificationUsingGETWithHttpInfo(id: string, version: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification/${id}/${version}/'
                    .replace('${' + 'id' + '}', String(id))
                    .replace('${' + 'version' + '}', String(version));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSpecificationUsingGET.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getSpecificationUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchSpecifications
     * 
     * @param query query
     * @param page Page number of the requested page
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    public searchSpecificationsUsingGETWithHttpInfo(query: string, page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/_search/serviceSpecification';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling searchSpecificationsUsingGET.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (query !== undefined) {
            queryParameters.set('query', <any>query);
        }

        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateSpecificationStatus
     * 
     * @param id id
     * @param version version
     * @param status status
     * @param authorization Authorization
     */
    public updateSpecificationStatusUsingPUTWithHttpInfo(id: string, version: string, status: string, authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification/${id}/${version}/status'
                    .replace('${' + 'id' + '}', String(id))
                    .replace('${' + 'version' + '}', String(version));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSpecificationStatusUsingPUT.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling updateSpecificationStatusUsingPUT.');
        }
        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling updateSpecificationStatusUsingPUT.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateSpecificationStatusUsingPUT.');
        }
        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * updateSpecification
     * 
     * @param specification specification
     * @param authorization Authorization
     */
    public updateSpecificationUsingPUTWithHttpInfo(specification: models.Specification, authorization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/serviceSpecification';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'specification' is not null or undefined
        if (specification === null || specification === undefined) {
            throw new Error('Required parameter specification was null or undefined when calling updateSpecificationUsingPUT.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateSpecificationUsingPUT.');
        }
        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: specification == null ? '' : JSON.stringify(specification), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
